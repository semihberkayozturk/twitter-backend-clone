openapi: 3.1.0
info:
  version: 1.0.0
  title: twitter-backend-clone
  description: |
    API documentation for the Twitter backend clone written in Node.js.
    Repository can be found at [github.com/bbsemih/twitter-backend-clone](https://github.com/bbsemih/twitter-backend-clone)
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
paths:
  /api/v1/user/{username}:
    parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
        description: Username of the user

    get:
      summary: Get user by username
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ErrorResponse'

    delete:
      summary: Delete user by username
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ErrorResponse'

    put:
      summary: Update user by username
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdatePayload'
      responses:
        '204':
          description: User updated successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ErrorResponse'

  /api/v1/tweet/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: ID of the tweet

    get:
      summary: Get tweet by ID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tweet'
        '404':
          description: Tweet not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ErrorResponse'

    delete:
      summary: Delete tweet by ID
      responses:
        '204':
          description: Tweet deleted successfully
        '404':
          description: Tweet not found
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ErrorResponse'

  /api/v1/tweet:
    post:
      summary: Create a new tweet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTweet'
      responses:
        '201':
          description: Tweet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tweet'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ErrorResponse'

components:
  schemas:
    User:
      type: object
      properties:
        id: 
          type: integer
          format: int32
        username:
          type: string
        email:
          type: string
        password:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        bio:
          type: string
        avatar: 
          type: string
        phone: 
          type: string
    Tweet:
      type: object
      properties:
        id: 
          type: integer
          format: int32
        tweet:
          type: string
        lat:
          type: number
          format: float
          minimum: -90
          maximum: 90
        lng:
          type: number
          format: float
          minimum: -180
          maximum: 180
        user_id:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Like:
      type: object
      properties:
        id: 
          type: integer
          format: int32
        user_id:
          type: integer
          format: int32
        tweet_id:
          type: integer
          format: int32
        comment_id:
          type: integer
          format: int32
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Comment:
      type: object
      properties:
        id: 
          type: integer
          format: int32
        contents:
          type: string
        user_id:
          type: integer
          format: int32
        tweet_id:
          type: integer
          format: int32
  responses:
    ErrorResponse:
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          oneOf:
            - $ref: '#/components/schemas/User'
            - type: null
      required:
        - status
        - message
  
  # Reusable path, query, header and cookie parameters TODO
  parameters: {}


servers:
  - url: 'http://localhost:3000/api/v1/docs'
    description: Main server
  # Not implemented yet but this can serve as an test server
  - url: 'http://localhost:3000/api/test/docs'
    description: Staging server

