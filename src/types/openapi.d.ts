/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/user/{username}": {
    /** Get user by username */
    get: {
      parameters: {
        path: {
          /** @description Username of the user */
          username: string;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description User not found */
        404: {
          content: {
            "application/json": components["responses"]["ErrorResponse"];
          };
        };
      };
    };
    /** Update user by username */
    put: {
      parameters: {
        path: {
          /** @description Username of the user */
          username: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UserUpdatePayload"];
        };
      };
      responses: {
        /** @description User updated successfully */
        204: never;
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["responses"]["UnathorizedError"];
          };
        };
        /** @description User not found */
        404: {
          content: {
            "application/json": components["responses"]["ErrorResponse"];
          };
        };
      };
    };
    /** Delete user by username */
    delete: {
      parameters: {
        path: {
          /** @description Username of the user */
          username: string;
        };
      };
      responses: {
        /** @description User deleted successfully */
        204: never;
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["responses"]["UnathorizedError"];
          };
        };
        /** @description User not found */
        404: {
          content: {
            "application/json": components["responses"]["ErrorResponse"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** @description Username of the user */
        username: string;
      };
    };
  };
  "/api/v1/tweet/{id}": {
    /** Get tweet by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the tweet */
          id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["Tweet"];
          };
        };
        /** @description Tweet not found */
        404: {
          content: {
            "application/json": components["responses"]["ErrorResponse"];
          };
        };
      };
    };
    /** Delete tweet by ID */
    delete: {
      parameters: {
        path: {
          /** @description ID of the tweet */
          id: number;
        };
      };
      responses: {
        /** @description Tweet deleted successfully */
        204: never;
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["responses"]["UnathorizedError"];
          };
        };
        /** @description Tweet not found */
        404: {
          content: {
            "application/json": components["responses"]["ErrorResponse"];
          };
        };
      };
    };
    parameters: {
      path: {
        /** @description ID of the tweet */
        id: number;
      };
    };
  };
  "/api/v1/tweet": {
    /** Create a new tweet */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["NewTweet"];
        };
      };
      responses: {
        /** @description Tweet created successfully */
        201: {
          content: {
            "application/json": components["schemas"]["Tweet"];
          };
        };
        /** @description Invalid request body */
        400: {
          content: {
            "application/json": components["responses"]["ErrorResponse"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            "application/json": components["responses"]["UnathorizedError"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    User: {
      /** Format: int32 */
      id?: number;
      username?: string;
      email?: string;
      password?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      bio?: string;
      avatar?: string;
      phone?: string;
    };
    Tweet: {
      /** Format: int32 */
      id?: number;
      tweet?: string;
      /** Format: float */
      lat?: number;
      /** Format: float */
      lng?: number;
      /** Format: int32 */
      user_id?: number;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    Like: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      user_id?: number;
      /** Format: int32 */
      tweet_id?: number;
      /** Format: int32 */
      comment_id?: number;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    Comment: {
      /** Format: int32 */
      id?: number;
      contents?: string;
      /** Format: int32 */
      user_id?: number;
      /** Format: int32 */
      tweet_id?: number;
    };
  };
  responses: {
    /** @description Access token is missing or invalid */
    UnathorizedError: {
      content: {
        "application/json": components["responses"]["ErrorResponse"];
      };
    };
    ErrorResponse: never;
  };
  parameters: {
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
